import streamlit as st
import joblib
import numpy as np
import pandas as pd
import warnings
warnings.simplefilter("ignore")

# ----------------------------------------
# üí°  App Configuration & Theme Settings
# ----------------------------------------
st.set_page_config(
    page_title="Driver Churn Prediction",
    page_icon="üöó",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Define Light Theme Colors
BACKGROUND_COLOR = "#f0f4f8"
TEXT_COLOR = "#333333"
BUTTON_COLOR = "#4CAF50"
BUTTON_HOVER_COLOR = "#45a049"
CHURN_HIGH_COLOR = "#f44336"
CHURN_LOW_COLOR = "#4CAF50"
FORM_BACKGROUND_COLOR = "#ffffff"
FORM_TEXT_COLOR = "#333333"

# Inject CSS for Light Theme UI
st.markdown(f"""
    <style>
        .stApp {{ background-color: {BACKGROUND_COLOR}; color: {TEXT_COLOR}; }}
        .main {{ background-color: {FORM_BACKGROUND_COLOR}; padding: 20px; border-radius: 10px;
                 box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); }}
        .stButton>button {{ background-color: {BUTTON_COLOR}; color: white; border-radius: 5px;
                            padding: 12px 24px; font-size: 18px; transition: 0.3s; }}
        .stButton>button:hover {{ background-color: {BUTTON_HOVER_COLOR}; }}
        .churn-high {{ color: {CHURN_HIGH_COLOR}; font-size: 28px; font-weight: bold; }}
        .churn-low {{ color: {CHURN_LOW_COLOR}; font-size: 28px; font-weight: bold; }}
    </style>
""", unsafe_allow_html=True)


# ----------------------------------------
# üöÄ Load the Model and Scaler using joblib
# ----------------------------------------
@st.cache_resource
def load_models():
    scaler = joblib.load('models/scaler.pkl')
    rf_model = joblib.load('models/rf_model.pkl')
    return scaler, rf_model


scaler, rf_model = load_models()

# ----------------------------------------
# üèÜ App Title & Description
# ----------------------------------------
st.title("üöó Driver Churn Prediction")
st.markdown("### Predict whether a driver is at risk of **churning** based on their profile.")
st.markdown("---")

# ----------------------------------------
# üìù User Input Form
# ----------------------------------------
with st.form("driver_form", clear_on_submit=False):
    col1, col2 = st.columns(2)

    with col1:
        age = st.number_input("üßë Age (years)", min_value=18, max_value=100, step=1, help="Driver's age")
        income = st.number_input("üí∞ Income (‚Çπ)", min_value=1000, max_value=1000000, step=1000,
                                 help="Driver's monthly income")
        total_business_value = st.number_input("üìä Total Business Value (‚Çπ)", min_value=1000, max_value=1000000,
                                               step=1000, help="Total revenue generated by the driver")
        joining_designation = st.selectbox("üìå Joining Designation", [1, 2, 3, 4, 5], help="Initial role when joining")
        last_quarterly_rating = st.selectbox("‚≠ê Last Quarterly Rating", [1, 2, 3, 4, 5],
                                             help="Performance rating in last quarter")

    with col2:
        gender = st.selectbox("‚öß Gender", ["Male", "Female"], help="Select driver's gender")
        education = st.selectbox("üéì Education Level", ["10+", "12+", "Graduate"],
                                 help="Highest education level attained")
        grade = st.selectbox("üèÜ Grade", [1, 2, 3, 4, 5], help="Current driver grade")
        quarterly_rating_increased = st.selectbox("üìà Quarterly Rating Increased?", ["Yes", "No"],
                                                  help="Did rating improve last quarter?")
        salary_increased = st.selectbox("üìâ Salary Increased?", ["Yes", "No"], help="Did salary increase recently?")

    # Submit Button
    submit_button = st.form_submit_button("üîÆ Predict Churn Probability")

# ----------------------------------------
# üîç Process Inputs & Make Predictions
# ----------------------------------------
if submit_button:
    # Convert categorical inputs
    gender = 0 if gender == "Male" else 1
    education_mapping = {"10+": 0, "12+": 1, "Graduate": 2}
    education = education_mapping[education]
    quarterly_rating_increased = 1 if quarterly_rating_increased == "Yes" else 0
    salary_increased = 1 if salary_increased == "Yes" else 0

    # Prepare input array
    user_input = np.array([[age, gender, education, income, joining_designation, grade,
                            total_business_value, last_quarterly_rating, quarterly_rating_increased, salary_increased]])

    # Define feature names (MUST match the names used during training)
    # Define feature names in the exact order as used during training
    feature_columns = [
        "Age", "Gender", "Education", "Income", "Joining_Designation",
        "Grade", "Total_Business_Value", "Last_Quarterly_Rating",
        "Quarterly_Rating_Increased", "Salary_Increased"
    ]

    # Convert user input into a DataFrame (ensuring correct feature names)
    user_input_df = pd.DataFrame(user_input, columns=feature_columns)

    # Ensure all columns match the training data exactly
    user_input_df = user_input_df[feature_columns]  # Ensures correct column order

    # Scale the input
    user_input_scaled = scaler.transform(user_input_df)

    # Predict churn probability
    churn_prob = rf_model.predict_proba(user_input_scaled)[:, 1][0]

    # ----------------------------------------
    # üéØ Display Results
    # ----------------------------------------
    st.markdown("---")
    st.markdown("### üîÆ **Churn Probability**")

    if churn_prob > 0.5:
        st.markdown(f'<div class="churn-high">‚ö†Ô∏è High Churn Risk! ({churn_prob:.2%})</div>', unsafe_allow_html=True)
        st.warning(f"The driver has a **{churn_prob:.2%} probability** of churning. Consider retention strategies.")
    else:
        st.markdown(f'<div class="churn-low">‚úîÔ∏è Low Churn Risk ({churn_prob:.2%})</div>', unsafe_allow_html=True)
        st.success(f"The driver has a **{churn_prob:.2%} probability** of staying. No major risk detected.")

    st.markdown("---")
